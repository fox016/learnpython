/* Clear tables */
DELETE FROM challenge_sets;
DELETE FROM challenges;

/* Initial challenge set data */
INSERT INTO challenge_sets VALUES ('math', 'Math Challenges', 1, 'Math challenges include problems in algebra, geometry, trigonometry, number theory, sequences, prime numbers, etc. Test your math skills and your coding skills combined!', now(), now());
INSERT INTO challenge_sets VALUES ('puzzle', 'Puzzle Games', 2, 'These puzzle games will test your problem solving skills and will require coding skills like iteration and recursion. Plus, the solutions will help you improve your puzzle game skills!', now(), now());
INSERT INTO challenge_sets VALUES ('security', 'Security', 3, 'Take a crack at cryptography and test basic skills for keeping digital data secure.', now(), now());
INSERT INTO challenge_sets VALUES ('bioinformatics', 'Bioinformatics', 4, 'Bioinformatics is the intersection between biology and computer science. Bioinformatics problems are often related to processing genetic data represented by strings of characters with an alphabet of "ATCG" or "AUCG". Solving these types of problems helps us to better understand the human genome and genetic disorders.', now(), now());

/* Initial challenge data */

INSERT INTO challenges VALUES ('cone_area', 'Surface Area of a Cone', 'math', 1, 1, 'A cone is a geometric shape. The base is a circle, and lines coming from every point on that circle converge at a single point.<p><img src="images/area_cone_pic.png"></p><p>The equation to calculate the surface area of a cone looks like this:</p><p><img src="images/area_cone_eq.png"></p><p>Write a function named <code>cone_area</code> that takes <code>height</code> and <code>radius</code> as parameters. Return the surface area of the cone.</p><p>Question: What is the surface area of a cone with a height of 2938 and radius of 761 (rounded to the nearest 2 decimal places)?</p><p>Hint: Using 3.14 for pi will not be precise enough. Use <code>math.pi</code> from Python&apos;s math module or use at least 10 digits of pi.</p>', '9075192.22', now(), now());

INSERT INTO challenges VALUES ('fib1', 'Fibonacci Sequence', 'math', 2, 1, 'The Fibonacci sequence is a mathematical sequence. It starts with (1, 1, 2, 3, 5, 8, 13, ...). Notice that each value is the sum of the previous two values. Write a function named <code>fib</code> that takes <code>n</code>, an integer, as a parameter. Return the nth value of the fibonacci sequence. The mathematical definition of the sequence is<p>fib(n=0) = 1<br/>fib(n=1) = 1<br/>fib(n>1) = fib(n-1) + fib(n-2)</p><p>Question: What are the <strong>last 50 digits</strong> of <code>fib(20000)</code>?</p><p>Hint: Even though the mathematical definition uses recursion, you may want to consider using iteration to solve this problem.</p>', '18631347739229074282048749390382177080100224710626', now(), now());

INSERT INTO challenges VALUES ('sudoku', 'Sudoku Solver', 'puzzle', 2, 3, 'A Sudoku board is 9x9 grid divided into 9 separate 3x3 squares. The initial board has some numbers (1-9) filled in. The object of the game is to get the numbers 1-9 into every row, every column, and every 3x3 square. You can learn more about Sudoku at <a target="_blank" href="https://en.wikipedia.org/wiki/Sudoku">https://en.wikipedia.org/wiki/Sudoku</a><p>For this challenge, you will be given a text file containing 50 Sudoku boards. Each board is represented in the file like so:</p><p>Grid 01<br/>003020600<br/>900305001<br/>001806400<br/>008102900<br/>700000008<br/>006708200<br/>002609500<br/>800203009<br/>005010300</p><p>The 0s are blanks. Your job is to solve all 50 Sudoku puzzles. Each one has a single unique solution. The solution for the first grid shown above is</p><p>483921657<br/>967345821<br/>251876493<br/>548132976<br/>729564138<br/>136798245<br/>372689514<br/>814253769<br/>695417382<br/></p><p>File: <a target="_blank" href="./files/sudoku.txt">Download Here</a></p><p>Question: What is the sum of all the 3-digit numbers found in the top left corner of each solution grid? (This number for the first solution grid shown above is 483)</p><p>Hint: Use recursion. Also, write and run the Python code on your own computer instead of using the coding space in the browser (and save often!).</p>', '24702', now(), now());

INSERT INTO challenges VALUES ('tictactoe', 'Tic Tac Toe', 'puzzle', 1, 2, 'Tic Tac Toe is a game played on a 3x3 grid. The board is initially blank. The first player places an X in one of the squares on the grid, then the second player places an O in an unoccupied square. This pattern continues until one player manages to win by getting three of their symbols in a row or the board no longer has any unoccupied squares. If both players play well, the board will fill up without either player getting three in a row.<p>Blocking is an important part of the game. If the opponent has two of three squares in a row, column, or diagonal filled, you must block by placing your symbol in the third square.</p><p>For this challenge, you will read in multiple Tic Tac Toe boards from a file. Each board will have exactly two Xs and seven blanks, like so:</p><p>__X<br/>_X_<br/>___</p><p>The squares on the board will be numbered as follows:</p><p>123<br/>456<br/>789</p><p>Calculate which square you should put an O in to block the opponent. If the two Xs are not in the same row, column, or diagonal, then the answer is 0. Otherwise the answer will be a number 1-9 representing the cell on the board in which to put an O. The answer to the example above is 7.</p><p>File: <a target="_blank" href="./files/tictactoe.txt">Download Here</a></p><p>Question: What is the string concatenation of the answer to all 36 boards? (e.g., If the answers to the first three boards are 7, 2, 0 then the answer will start with 720)</p>', '321700987600954405130050020950601387', now(), now());

INSERT INTO challenges VALUES ('gcd', 'Greatest Common Divisor', 'math', 3, 1, 'The greatest common divisor (GCD) of two numbers (a, b) is the greatest number that multiplies evenly into both a and b. For example, the GCD of 108 and 48 is 12. The euclidean algorithm is a mathematically recursive algorithm used to efficiently compute the GCD of two numbers. The logic of the algorithm works as follows:<ul><li>If <code>a=0</code> then <code>gcd(a,b)=b</code></li><li>If <code>b=0</code> then <code>gcd(a,b)=a</code></li><li>If <code>b &gt; a</code> then recursively return <code>gcd(b,a)</code></li><li>Write <code>a</code> in the form <code>a=b*q+r</code> where q is the integer quotient (<code>a / b</code>)and r is the remainder (<code>a % b</code>)</li><li>Then <code>gcd(a,b)=gcd(b,r)</code>, so recursively return <code>gcd(b,r)</code></li></ul><p>Each line in the provided file has the format a,b where a and b are both integers (possibly large integers). The answer to each line is <code>gcd(a,b)</code>. Python does have built-in functions to calculate gcd, but you should implement your own if you want to learn anything.</p><p>File: <a target="_blank" href="./files/gcd.txt">Download Here</a></p><p>Question: What is the sum of all the GCDs for each line (a,b) in the given file? Calculate each GCD then add up all the answers.</p><p>Hint: Use the long() function to cast the strings from the file into long types instead of ints.</p>', '98236798200411914682022332135028333179426170174217', now(), now());

INSERT INTO challenges VALUES ('kmer', 'Most Frequent K-Mer', 'bioinformatics', 1, 1, 'DNA can be represented by long strings with the letters A, C, T, and G as the only characters. These DNA strings may seem random, but there are patterns that can help us to better understand genetic disorders. For this problem, you will write a function <code>most_frequent_kmer</code> that takes two arguments <code>dna</code> and <code>k</code>. The function returns the most frequently repeated substring of length <code>k</code> found in the string <code>dna</code>. Each substring of length <code>k</code> in a DNA string is known as a <em>kmer</em> or <em>k-mer</em>.<p>The file contains lines of the format <code>dna,k</code> (e.g., "AATCCGACGTCGATAGCATAACGATGGCGATTCGA,3"). The answer to each line in the file is the most frequent kmer for the given dna and k values. Each string of DNA is roughly 20,000 characters (in this case, <em>nucleotides</em>) long.</p><p>File: <a target="_blank" href="./files/kmer.txt">Download Here</a></p><p>Question: What is the string concatenation of the answers to all the most frequent kmers from the given file?</p><p>Hint: Use a dictionary to map kmers to their counts. Once the dictionary is created, iterate through it and keep track of the one with the highest count so far.</p>', 'GGGACCTGGCGCCTCTTTATTATCATACGGGACCACCCTCGA', now(), now());

INSERT INTO challenges VALUES ('decryptkey', 'Crack Decryption Key', 'security', 1, 2, 'TODO', 'TODO', now(), now());

INSERT INTO challenges VALUES ('boggle', 'Boggle', 'puzzle', 3, 3, 'TODO', 'TODO', now(), now());
